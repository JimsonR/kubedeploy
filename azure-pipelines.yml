trigger:
  - main

variables:
  tag:  'latest'
  azmcpserverImage: 'eswarchivatam/azmcpserver:$(tag)'
  mcpclientImage:  'eswarchivatam/mcpclient:$(tag)'
  mcpfrontendImage: 'eswarchivatam/mcpfrontend:$(tag)'
  k8sNamespace: 'mcp-app'

stages:
- stage: KubernetesManifests
  displayName: Copy Manifests
  jobs:
  - job: KubernetesManifestsCopy
    displayName: Copy kubernetes manifests
    pool:
      name: default
    steps:
      - task: CopyFiles@2
        displayName: 'Copy Kubernetes Manifests'
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)'
          Contents: '**/*.yaml'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/manifests'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Manifests'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'manifests'
          publishLocation: 'Container'

- stage: Deploy
  displayName: Deploy image
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      name: default
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Manifests'
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        itemPattern: '**/*.yaml'
        targetPath: '$(System.ArtifactsDirectory)'

    - task: AzureCLI@2
      displayName: 'Debug - List Downloaded Files'
      inputs:
        azureSubscription: 'kubernetes-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Contents of $(System.ArtifactsDirectory):"
          ls -la "$(System.ArtifactsDirectory)"
          echo "Looking for manifests folder:"
          ls -la "$(System.ArtifactsDirectory)/manifests" || echo "manifests folder not found"


    - task: AzureCLI@2
      displayName: 'Create/Update Kubernetes Namespace and Secrets'
      inputs:
        azureSubscription: 'kubernetes-service-connection' # <-- Replace with your Azure Resource Manager connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks command invoke \
            --resource-group MultiAgentDataVisual \
            --name Multiagent_AKS \
            --command "kubectl create namespace $(k8sNamespace) --dry-run=client -o yaml | kubectl apply -f -"
          az aks command invoke \
            --resource-group MultiAgentDataVisual \
            --name Multiagent_AKS \
            --command "kubectl create secret generic azure-sql-secret -n $(k8sNamespace) --from-literal=password=$AZURE_SQL_PASSWORD --dry-run=client -o yaml | kubectl apply -f -"
          az aks command invoke \
            --resource-group MultiAgentDataVisual \
            --name Multiagent_AKS \
            --command "kubectl create secret generic azure-openai-secret -n $(k8sNamespace) --from-literal=api-key=$AZURE_OPENAI_API_KEY --dry-run=client -o yaml | kubectl apply -f -"
      env:
        AZURE_SQL_PASSWORD: $(AZURE_SQL_PASSWORD)
        AZURE_OPENAI_API_KEY: $(AZURE_OPENAI_API_KEY)


    - script: |
        mkdir -p $HOME/.local/bin
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl $HOME/.local/bin/
        echo "##vso[task.setvariable variable=PATH]$HOME/.local/bin:$PATH"
      displayName: 'Install kubectl (user local bin)'

    - script: |
        rm -f $HOME/.local/bin/kubelogin
        mkdir -p $HOME/.local/bin
        KUBELOGIN_VERSION=$(curl -s https://api.github.com/repos/Azure/kubelogin/releases/latest | grep tag_name | cut -d '\"' -f4)
        curl -Lo $HOME/.local/bin/kubelogin https://github.com/Azure/kubelogin/releases/download/${KUBELOGIN_VERSION}/kubelogin-linux-amd64
        chmod +x $HOME/.local/bin/kubelogin
        file $HOME/.local/bin/kubelogin
        echo "##vso[task.setvariable variable

    - task: AzureCLI@2
      displayName: 'Get AKS Credentials'
      inputs:
        azureSubscription: 'kubernetes-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group MultiAgentDataVisual --name Multiagent_AKS --overwrite-existing

    - script: |
        kubectl apply -f $(System.ArtifactsDirectory)/azmcpserver-deployment.yaml
        kubectl apply -f $(System.ArtifactsDirectory)/azmcpserver-service.yaml
      displayName: 'Deploy azmcpserver'

    - script: |
        kubectl apply -f $(System.ArtifactsDirectory)/mcp-client-deployment.yaml
        kubectl apply -f $(System.ArtifactsDirectory)/mcp-client-service.yaml
      displayName: 'Deploy mcp-client'

    - script: |
        kubectl apply -f $(System.ArtifactsDirectory)/mcp-frontend-deployment.yaml
        kubectl apply -f $(System.ArtifactsDirectory)/mcp-frontend-service.yaml
      displayName: 'Deploy mcp-frontend'
